# Docker Compose file for unified astron-agent + astron-rpa deployment
# Note: version field is obsolete in modern Docker Compose

# ============================================================================
# UNIFIED DEPLOYMENT: astron-agent + astron-rpa
# ============================================================================
# This docker-compose file deploys both astron-agent and astron-rpa systems
# with proper integration, networking, and shared infrastructure.
# ============================================================================

services:
  # ============================================================================
  # SHARED INFRASTRUCTURE SERVICES
  # ============================================================================

  # MySQL Database (Shared by both systems)
  mysql:
    image: mysql:8.4
    container_name: unified-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-astron_unified}
    ports:
      - "${EXPOSE_MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d/
    networks:
      - astron-unified-network
    restart: always
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-root123}"]
      interval: 30s
      timeout: 10s
      retries: 60
      start_period: 30s

  # Redis Cache (Shared by both systems)
  redis:
    image: redis:7-alpine
    container_name: unified-redis
    ports:
      - "${EXPOSE_REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - astron-unified-network
    restart: always
    command: redis-server ${REDIS_PASSWORD:+--requirepass} ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ${REDIS_PASSWORD:+-a \"$REDIS_PASSWORD\"} ping | grep PONG"]
      interval: 30s
      timeout: 10s
      retries: 60

  # MinIO Object Storage (Shared by both systems)
  minio:
    image: minio/minio:latest
    container_name: unified-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    ports:
      - "${EXPOSE_MINIO_PORT:-9000}:9000"
      - "${EXPOSE_MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
    networks:
      - astron-unified-network
    restart: always
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 60

  # ============================================================================
  # ASTRON-AGENT SPECIFIC INFRASTRUCTURE
  # ============================================================================

  # PostgreSQL Database (astron-agent specific)
  postgres:
    image: postgres:14
    container_name: unified-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sparkdb_manager}
      POSTGRES_USER: ${POSTGRES_USER:-spark}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-spark123}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${EXPOSE_POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d/
    networks:
      - astron-unified-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-spark} -d ${POSTGRES_DB:-sparkdb_manager}"]
      interval: 30s
      timeout: 10s
      retries: 60

  # Elasticsearch (astron-agent specific)
  elasticsearch:
    image: elasticsearch:7.16.2
    container_name: unified-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=${ES_JAVA_OPTS:--Xms512m -Xmx512m}"
      - xpack.security.enabled=${ELASTICSEARCH_SECURITY_ENABLED:-false}
      - cluster.name=astron-unified-cluster
    ports:
      - "${EXPOSE_ELASTICSEARCH_PORT:-9200}:9200"
      - "${EXPOSE_ELASTICSEARCH_TRANSPORT_PORT:-9300}:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - astron-unified-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 60

  # Kafka (astron-agent specific)
  kafka:
    image: apache/kafka:3.7.0
    container_name: unified-kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:${EXPOSE_KAFKA_PORT:-9092}
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,CONTROLLER://0.0.0.0:29093,PLAINTEXT_HOST://0.0.0.0:${EXPOSE_KAFKA_PORT:-9092}
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:29093
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    ports:
      - "${EXPOSE_KAFKA_PORT:-9092}:${EXPOSE_KAFKA_PORT:-9092}"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - astron-unified-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:${EXPOSE_KAFKA_PORT:-9092} --list"]
      interval: 30s
      timeout: 10s
      retries: 60

  # ============================================================================
  # ASTRON-RPA SERVICES
  # ============================================================================

  # Casdoor Authentication Service
  casdoor:
    image: casbin/casdoor:latest
    container_name: astron-rpa-casdoor
    environment:
      RUNNING_IN_DOCKER: "true"
      CASDOOR_DATABASE_TYPE: mysql
      CASDOOR_DATABASE_HOST: mysql
      CASDOOR_DATABASE_PORT: 3306
      CASDOOR_DATABASE_NAME: casdoor
      CASDOOR_DATABASE_USERNAME: root
      CASDOOR_DATABASE_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123}
    ports:
      - "${CASDOOR_PORT:-8000}:8000"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - astron-unified-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/get-global-providers"]
      interval: 30s
      timeout: 10s
      retries: 60

  # astron-rpa AI Service
  rpa-ai-service:
    image: astron-rpa/ai-service:latest
    container_name: astron-rpa-ai-service
    environment:
      # Database Configuration
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_USER: root
      MYSQL_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123}
      MYSQL_DATABASE: rpa_ai
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      # MinIO Configuration
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      MINIO_BUCKET: rpa-ai-bucket
      # Service Configuration
      SERVICE_PORT: 8010
      SERVICE_HOST: 0.0.0.0
    ports:
      - "${RPA_AI_SERVICE_PORT:-8010}:8010"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - astron-unified-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/health"]
      interval: 30s
      timeout: 10s
      retries: 60

  # astron-rpa OpenAPI Service
  rpa-openapi-service:
    image: astron-rpa/openapi-service:latest
    container_name: astron-rpa-openapi-service
    environment:
      # Database Configuration
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_USER: root
      MYSQL_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123}
      MYSQL_DATABASE: rpa_openapi
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      # Service Configuration
      SERVICE_PORT: 8020
      SERVICE_HOST: 0.0.0.0
      # Integration with other services
      AI_SERVICE_URL: http://rpa-ai-service:8010
      RESOURCE_SERVICE_URL: http://rpa-resource-service:8030
      ROBOT_SERVICE_URL: http://rpa-robot-service:8040
    ports:
      - "${RPA_OPENAPI_SERVICE_PORT:-8020}:8020"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      rpa-ai-service:
        condition: service_healthy
    networks:
      - astron-unified-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8020/health"]
      interval: 30s
      timeout: 10s
      retries: 60

  # astron-rpa Resource Service
  rpa-resource-service:
    image: astron-rpa/resource-service:latest
    container_name: astron-rpa-resource-service
    environment:
      # Database Configuration
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_USER: root
      MYSQL_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123}
      MYSQL_DATABASE: rpa_resource
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      # MinIO Configuration
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      MINIO_BUCKET: rpa-resource-bucket
      # Service Configuration
      SERVICE_PORT: 8030
      SERVICE_HOST: 0.0.0.0
    ports:
      - "${RPA_RESOURCE_SERVICE_PORT:-8030}:8030"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - astron-unified-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8030/health"]
      interval: 30s
      timeout: 10s
      retries: 60

  # astron-rpa Robot Service
  rpa-robot-service:
    image: astron-rpa/robot-service:latest
    container_name: astron-rpa-robot-service
    environment:
      # Database Configuration
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_USER: root
      MYSQL_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123}
      MYSQL_DATABASE: rpa_robot
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      # Service Configuration
      SERVICE_PORT: 8040
      SERVICE_HOST: 0.0.0.0
      # Integration with other services
      AI_SERVICE_URL: http://rpa-ai-service:8010
      RESOURCE_SERVICE_URL: http://rpa-resource-service:8030
    ports:
      - "${RPA_ROBOT_SERVICE_PORT:-8040}:8040"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      rpa-ai-service:
        condition: service_healthy
      rpa-resource-service:
        condition: service_healthy
    networks:
      - astron-unified-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8040/health"]
      interval: 30s
      timeout: 10s
      retries: 60

  # astron-rpa Frontend
  rpa-frontend:
    image: astron-rpa/frontend:latest
    container_name: astron-rpa-frontend
    environment:
      # API Configuration
      REACT_APP_API_BASE_URL: http://localhost:8020
      REACT_APP_AI_SERVICE_URL: http://localhost:8010
      REACT_APP_RESOURCE_SERVICE_URL: http://localhost:8030
      REACT_APP_ROBOT_SERVICE_URL: http://localhost:8040
      # Authentication
      REACT_APP_AUTH_URL: http://localhost:8000
    ports:
      - "${RPA_FRONTEND_PORT:-32742}:80"
    depends_on:
      rpa-openapi-service:
        condition: service_healthy
      casdoor:
        condition: service_healthy
    networks:
      - astron-unified-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 60

  # ============================================================================
  # ASTRON-AGENT SERVICES
  # ============================================================================

  # astron-agent Core Agent Service
  agent-core-agent:
    image: astron-agent/core-agent:latest
    container_name: astron-agent-core-agent
    environment:
      # Python Environment
      PYTHONUNBUFFERED: "1"
      # Runtime Configuration
      RUN_ENVIRON: ${RUN_ENVIRON:-prod}
      USE_POLARIS: "false"
      # Service Configuration
      SERVICE_NAME: "Agent"
      SERVICE_SUB: "sag"
      SERVICE_LOCATION: "unified"
      SERVICE_APP: "app:app"
      SERVICE_HOST: "0.0.0.0"
      SERVICE_PORT: "17870"
      SERVICE_WORKERS: "1"
      SERVICE_RELOAD: "false"
      # Database Configuration
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_USER: root
      MYSQL_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123}
      MYSQL_DB: agent
      # Redis Configuration
      REDIS_ADDR: redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_EXPIRE: 3600
      # PostgreSQL Configuration
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-spark}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-spark123}
      POSTGRES_DB: ${POSTGRES_DB:-sparkdb_manager}
      # Elasticsearch Configuration
      ELASTICSEARCH_HOST: elasticsearch
      ELASTICSEARCH_PORT: 9200
      # Kafka Configuration
      KAFKA_SERVERS: kafka:29092
      KAFKA_TIMEOUT: 10
      # MinIO Configuration
      OSS_TYPE: s3
      OSS_ENDPOINT: http://minio:9000
      OSS_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
      OSS_ACCESS_KEY_SECRET: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      OSS_BUCKET_NAME: agent-bucket
      OSS_DOWNLOAD_HOST: http://localhost:9000
      OSS_TTL: 157788000
    ports:
      - "${AGENT_CORE_PORT:-17870}:17870"
    depends_on:
      postgres:
        condition: service_healthy
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - astron-unified-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:17870/health"]
      interval: 30s
      timeout: 10s
      retries: 60

  # astron-agent RPA Plugin Service (with integration to astron-rpa)
  agent-core-rpa:
    image: astron-agent/core-rpa:latest
    container_name: astron-agent-core-rpa
    environment:
      # Python Environment
      PYTHONUNBUFFERED: "1"
      # Service Configuration
      SERVICE_HOST: "0.0.0.0"
      SERVICE_PORT: "8003"
      # Database Configuration
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_USER: root
      MYSQL_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123}
      MYSQL_DB: rpa_plugin
      # Redis Configuration
      REDIS_ADDR: redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      # RPA Integration Configuration (KEY INTEGRATION POINT)
      XIAOWU_RPA_TASK_CREATE_URL: http://rpa-openapi-service:8020/api/v1/tasks/create
      XIAOWU_RPA_TASK_QUERY_URL: http://rpa-openapi-service:8020/api/v1/tasks
      RPA_AI_SERVICE_URL: http://rpa-ai-service:8010
      RPA_RESOURCE_SERVICE_URL: http://rpa-resource-service:8030
      RPA_ROBOT_SERVICE_URL: http://rpa-robot-service:8040
      # Authentication for RPA services
      RPA_API_KEY: ${RPA_API_KEY:-default-api-key}
      RPA_API_SECRET: ${RPA_API_SECRET:-default-api-secret}
    ports:
      - "${AGENT_RPA_PORT:-8003}:8003"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      rpa-openapi-service:
        condition: service_healthy
      rpa-ai-service:
        condition: service_healthy
      rpa-resource-service:
        condition: service_healthy
      rpa-robot-service:
        condition: service_healthy
    networks:
      - astron-unified-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 60

  # astron-agent Knowledge Service
  agent-core-knowledge:
    image: astron-agent/core-knowledge:latest
    container_name: astron-agent-core-knowledge
    environment:
      # Service Configuration
      SERVICE_HOST: "0.0.0.0"
      SERVICE_PORT: "7881"
      # Database Configuration
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_USER: root
      MYSQL_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123}
      MYSQL_DB: knowledge
      # Elasticsearch Configuration
      ELASTICSEARCH_HOST: elasticsearch
      ELASTICSEARCH_PORT: 9200
      # MinIO Configuration
      OSS_ENDPOINT: http://minio:9000
      OSS_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
      OSS_ACCESS_KEY_SECRET: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      OSS_BUCKET_NAME: knowledge-bucket
    ports:
      - "${AGENT_KNOWLEDGE_PORT:-7881}:7881"
    depends_on:
      mysql:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - astron-unified-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7881/health"]
      interval: 30s
      timeout: 10s
      retries: 60

  # astron-agent Memory Service
  agent-core-memory:
    image: astron-agent/core-memory:latest
    container_name: astron-agent-core-memory
    environment:
      # Service Configuration
      SERVICE_HOST: "0.0.0.0"
      SERVICE_PORT: "7882"
      # Database Configuration
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_USER: root
      MYSQL_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123}
      MYSQL_DB: memory
      # Redis Configuration
      REDIS_ADDR: redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "${AGENT_MEMORY_PORT:-7882}:7882"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - astron-unified-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7882/health"]
      interval: 30s
      timeout: 10s
      retries: 60

  # astron-agent Tenant Service
  agent-core-tenant:
    image: astron-agent/core-tenant:latest
    container_name: astron-agent-core-tenant
    environment:
      # Service Configuration
      SERVICE_HOST: "0.0.0.0"
      SERVICE_PORT: "7883"
      # Database Configuration
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_USER: root
      MYSQL_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123}
      MYSQL_DB: tenant
    ports:
      - "${AGENT_TENANT_PORT:-7883}:7883"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - astron-unified-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7883/health"]
      interval: 30s
      timeout: 10s
      retries: 60

  # astron-agent Workflow Service
  agent-core-workflow:
    image: astron-agent/core-workflow:latest
    container_name: astron-agent-core-workflow
    environment:
      # Service Configuration
      SERVICE_HOST: "0.0.0.0"
      SERVICE_PORT: "7880"
      # Database Configuration
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_USER: root
      MYSQL_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123}
      MYSQL_DB: workflow
      # Kafka Configuration
      KAFKA_SERVERS: kafka:29092
      KAFKA_TIMEOUT: 10
      KAFKA_TOPIC: spark-agent-builder
      # MinIO Configuration
      OSS_ENDPOINT: http://minio:9000
      OSS_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
      OSS_ACCESS_KEY_SECRET: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      OSS_BUCKET_NAME: workflow-bucket
    ports:
      - "${AGENT_WORKFLOW_PORT:-7880}:7880"
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - astron-unified-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7880/health"]
      interval: 30s
      timeout: 10s
      retries: 60

  # astron-agent Console Frontend
  agent-console-frontend:
    image: astron-agent/console-frontend:latest
    container_name: astron-agent-console-frontend
    environment:
      # API Configuration
      REACT_APP_API_BASE_URL: http://localhost:8080
      REACT_APP_AGENT_API_URL: http://localhost:17870
      REACT_APP_RPA_API_URL: http://localhost:8003
      # RPA Integration URLs (for frontend to show RPA capabilities)
      REACT_APP_RPA_FRONTEND_URL: http://localhost:32742
      REACT_APP_RPA_OPENAPI_URL: http://localhost:8020
    ports:
      - "${AGENT_CONSOLE_FRONTEND_PORT:-1881}:1881"
    depends_on:
      agent-console-hub:
        condition: service_healthy
    networks:
      - astron-unified-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1881"]
      interval: 30s
      timeout: 10s
      retries: 60

  # astron-agent Console Hub (Backend)
  agent-console-hub:
    image: astron-agent/console-hub:latest
    container_name: astron-agent-console-hub
    environment:
      # Domain Configuration
      ASTRON_DOMAIN: ${ASTRON_DOMAIN:-http://localhost}
      # Database Configuration
      MYSQL_URL: jdbc:mysql://mysql:3306/astron_console
      MYSQL_USERNAME: root
      MYSQL_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123}
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DATABASE: 0
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      # MinIO Configuration
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      S3_BUCKET: astron-console-bucket
      S3_PRESIGN_EXPIRY_SECONDS: 600
      # Service Integration
      AGENT_SERVICE_URL: http://agent-core-agent:17870
      RPA_SERVICE_URL: http://agent-core-rpa:8003
      KNOWLEDGE_SERVICE_URL: http://agent-core-knowledge:7881
      MEMORY_SERVICE_URL: http://agent-core-memory:7882
      TENANT_SERVICE_URL: http://agent-core-tenant:7883
      WORKFLOW_SERVICE_URL: http://agent-core-workflow:7880
      # RPA Platform Integration
      RPA_PLATFORM_URL: http://rpa-openapi-service:8020
      RPA_FRONTEND_URL: http://rpa-frontend:80
    ports:
      - "${AGENT_CONSOLE_HUB_PORT:-8080}:8080"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      agent-core-agent:
        condition: service_healthy
      agent-core-rpa:
        condition: service_healthy
      rpa-openapi-service:
        condition: service_healthy
    networks:
      - astron-unified-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 60

  # ============================================================================
  # REVERSE PROXY & LOAD BALANCER
  # ============================================================================

  nginx:
    image: nginx:alpine
    container_name: unified-nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - agent-console-frontend
      - rpa-frontend
      - agent-console-hub
      - rpa-openapi-service
    networks:
      - astron-unified-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 60

# ============================================================================
# NETWORK CONFIGURATION
# ============================================================================
networks:
  astron-unified-network:
    driver: bridge
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET:-172.50.0.0/16}

# ============================================================================
# VOLUME CONFIGURATION
# ============================================================================
volumes:
  # Shared Infrastructure Volumes
  mysql_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  
  # astron-agent Specific Volumes
  postgres_data:
    driver: local
  elasticsearch_data:
    driver: local
  kafka_data:
    driver: local
