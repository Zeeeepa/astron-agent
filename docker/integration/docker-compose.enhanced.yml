version: '3.8'

services:
  # ============================================================================
  # Astron-Agent Services (Orchestration Layer)
  # ============================================================================
  
  astron-agent:
    build: 
      context: ../../
      dockerfile: docker/base/Dockerfile.astron-agent
    container_name: astron-agent
    ports:
      - "${AGENT_PORT:-8000}:8000"
    environment:
      # RPA Integration Configuration
      - RPA_OPENAPI_URL=http://astron-rpa-openapi:8020
      - RPA_MCP_ENDPOINT=http://astron-rpa-openapi:8020/mcp
      - RPA_API_KEY=${RPA_API_KEY:-}
      - RPA_INTEGRATION_ENABLED=true
      - RPA_DEBUG_MODE=${RPA_DEBUG_MODE:-false}
      
      # Database Configuration
      - MYSQL_URL=mysql://root:${MYSQL_ROOT_PASSWORD:-root123}@mysql:3306/astron_unified
      - REDIS_URL=redis://redis-cluster:6379
      
      # Service Configuration
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=8000
    depends_on:
      - astron-rpa-openapi
      - mysql
      - redis-cluster
    networks:
      - astron-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============================================================================
  # Astron-RPA Services (Execution Layer)
  # ============================================================================
  
  astron-rpa-openapi:
    build:
      context: ../../
      dockerfile: docker/base/Dockerfile.astron-rpa
    container_name: astron-rpa-openapi
    ports:
      - "${RPA_OPENAPI_PORT:-8020}:8020"
    environment:
      - AGENT_CALLBACK_URL=http://astron-agent:8000/webhook
      - RPA_ENGINE_URL=http://astron-rpa-engine:8021
      - MYSQL_URL=mysql://root:${MYSQL_ROOT_PASSWORD:-root123}@mysql:3306/rpa
      - REDIS_URL=redis://redis-cluster:6379
      - PYTHON_VERSION=3.13+
      - MCP_ENABLED=true
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      - astron-rpa-engine
      - mysql
      - redis-cluster
    networks:
      - astron-network
    volumes:
      - ./rpa-logs:/app/logs
      - ./rpa-components:/app/components
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8020/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  astron-rpa-engine:
    build:
      context: ../../
      dockerfile: docker/base/Dockerfile.astron-rpa
    container_name: astron-rpa-engine
    ports:
      - "${RPA_ENGINE_PORT:-8021}:8021"
    environment:
      - PYTHON_VERSION=3.13+
      - COMPONENT_PATH=/app/components
      - MYSQL_URL=mysql://root:${MYSQL_ROOT_PASSWORD:-root123}@mysql:3306/rpa
      - REDIS_URL=redis://redis-cluster:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    networks:
      - astron-network
    volumes:
      - ./rpa-components:/app/components
      - ./rpa-workflows:/app/workflows
      - ./rpa-logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8021/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: ["python", "-m", "uvicorn", "engine:app", "--host", "0.0.0.0", "--port", "8021"]

  # ============================================================================
  # Shared Infrastructure
  # ============================================================================
  
  mysql:
    image: mysql:8.4
    container_name: astron-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123}
      MYSQL_DATABASE: astron_unified
      MYSQL_USER: ${MYSQL_USER:-astron}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-astron123}
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/seed-data.sql:/docker-entrypoint-initdb.d/02-seed-data.sql
    networks:
      - astron-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  redis-cluster:
    image: redis:7-alpine
    container_name: astron-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --cluster-enabled yes --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - astron-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ============================================================================
  # Monitoring Stack (Optional Profile)
  # ============================================================================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: astron-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - astron-network
      - astron-monitoring-network
    restart: unless-stopped
    profiles:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: astron-grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - astron-network
      - astron-monitoring-network
    restart: unless-stopped
    profiles:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Web UI (Optional Profile)
  # ============================================================================
  
  astron-web-ui:
    image: astron-web-ui:latest
    container_name: astron-web-ui
    ports:
      - "${WEB_UI_PORT:-3001}:3000"
    environment:
      - REACT_APP_AGENT_API_URL=http://localhost:8000
      - REACT_APP_RPA_API_URL=http://localhost:8020
      - REACT_APP_MONITORING_URL=http://localhost:9090
    networks:
      - astron-network
    restart: unless-stopped
    profiles:
      - ui
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

# ============================================================================
# Volumes
# ============================================================================

volumes:
  mysql_data:
    driver: local
    labels:
      - "com.astron.volume.type=database"
      - "com.astron.volume.service=mysql"
  redis_data:
    driver: local
    labels:
      - "com.astron.volume.type=cache"
      - "com.astron.volume.service=redis"
  prometheus_data:
    driver: local
    labels:
      - "com.astron.volume.type=monitoring"
      - "com.astron.volume.service=prometheus"
  grafana_data:
    driver: local
    labels:
      - "com.astron.volume.type=monitoring"
      - "com.astron.volume.service=grafana"

# ============================================================================
# Networks
# ============================================================================

networks:
  astron-network:
    driver: bridge
    name: astron-integration-network
    ipam:
      config:
        - subnet: 172.20.0.0/16
    labels:
      - "com.astron.network.type=integration"
      - "com.astron.network.version=1.0"
  
  astron-monitoring-network:
    driver: bridge
    name: astron-monitoring-network
    ipam:
      config:
        - subnet: 172.21.0.0/16
    labels:
      - "com.astron.network.type=monitoring"
      - "com.astron.network.version=1.0"
